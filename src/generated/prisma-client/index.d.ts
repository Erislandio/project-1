// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  address: (where?: AddressWhereInput) => Promise<boolean>;
  assessment: (where?: AssessmentWhereInput) => Promise<boolean>;
  provider: (where?: ProviderWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  address: (where: AddressWhereUniqueInput) => AddressNullablePromise;
  addresses: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Address>;
  addressesConnection: (args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AddressConnectionPromise;
  assessment: (where: AssessmentWhereUniqueInput) => AssessmentNullablePromise;
  assessments: (args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Assessment>;
  assessmentsConnection: (args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => AssessmentConnectionPromise;
  provider: (where: ProviderWhereUniqueInput) => ProviderNullablePromise;
  providers: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Provider>;
  providersConnection: (args?: {
    where?: ProviderWhereInput;
    orderBy?: ProviderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProviderConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createAddress: (data: AddressCreateInput) => AddressPromise;
  updateAddress: (args: {
    data: AddressUpdateInput;
    where: AddressWhereUniqueInput;
  }) => AddressPromise;
  updateManyAddresses: (args: {
    data: AddressUpdateManyMutationInput;
    where?: AddressWhereInput;
  }) => BatchPayloadPromise;
  upsertAddress: (args: {
    where: AddressWhereUniqueInput;
    create: AddressCreateInput;
    update: AddressUpdateInput;
  }) => AddressPromise;
  deleteAddress: (where: AddressWhereUniqueInput) => AddressPromise;
  deleteManyAddresses: (where?: AddressWhereInput) => BatchPayloadPromise;
  createAssessment: (data: AssessmentCreateInput) => AssessmentPromise;
  updateAssessment: (args: {
    data: AssessmentUpdateInput;
    where: AssessmentWhereUniqueInput;
  }) => AssessmentPromise;
  updateManyAssessments: (args: {
    data: AssessmentUpdateManyMutationInput;
    where?: AssessmentWhereInput;
  }) => BatchPayloadPromise;
  upsertAssessment: (args: {
    where: AssessmentWhereUniqueInput;
    create: AssessmentCreateInput;
    update: AssessmentUpdateInput;
  }) => AssessmentPromise;
  deleteAssessment: (where: AssessmentWhereUniqueInput) => AssessmentPromise;
  deleteManyAssessments: (where?: AssessmentWhereInput) => BatchPayloadPromise;
  createProvider: (data: ProviderCreateInput) => ProviderPromise;
  updateProvider: (args: {
    data: ProviderUpdateInput;
    where: ProviderWhereUniqueInput;
  }) => ProviderPromise;
  updateManyProviders: (args: {
    data: ProviderUpdateManyMutationInput;
    where?: ProviderWhereInput;
  }) => BatchPayloadPromise;
  upsertProvider: (args: {
    where: ProviderWhereUniqueInput;
    create: ProviderCreateInput;
    update: ProviderUpdateInput;
  }) => ProviderPromise;
  deleteProvider: (where: ProviderWhereUniqueInput) => ProviderPromise;
  deleteManyProviders: (where?: ProviderWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  address: (
    where?: AddressSubscriptionWhereInput
  ) => AddressSubscriptionPayloadSubscription;
  assessment: (
    where?: AssessmentSubscriptionWhereInput
  ) => AssessmentSubscriptionPayloadSubscription;
  provider: (
    where?: ProviderSubscriptionWhereInput
  ) => ProviderSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type AddressOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "zipcode_ASC"
  | "zipcode_DESC"
  | "street_ASC"
  | "street_DESC"
  | "neighborhood_ASC"
  | "neighborhood_DESC"
  | "number_ASC"
  | "number_DESC"
  | "city_ASC"
  | "city_DESC"
  | "country_ASC"
  | "country_DESC"
  | "state_ASC"
  | "state_DESC"
  | "complement_ASC"
  | "complement_DESC";

export type Stars = "ONE" | "TWO" | "THREE" | "FOUR" | "FIVE";

export type AssessmentOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "description_ASC"
  | "description_DESC"
  | "title_ASC"
  | "title_DESC"
  | "star_ASC"
  | "star_DESC";

export type ProviderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "name_ASC"
  | "name_DESC"
  | "type_ASC"
  | "type_DESC"
  | "description_ASC"
  | "description_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "document_ASC"
  | "document_DESC"
  | "password_ASC"
  | "password_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastname_ASC"
  | "lastname_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type AddressWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AddressWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  zipcode?: Maybe<String>;
  zipcode_not?: Maybe<String>;
  zipcode_in?: Maybe<String[] | String>;
  zipcode_not_in?: Maybe<String[] | String>;
  zipcode_lt?: Maybe<String>;
  zipcode_lte?: Maybe<String>;
  zipcode_gt?: Maybe<String>;
  zipcode_gte?: Maybe<String>;
  zipcode_contains?: Maybe<String>;
  zipcode_not_contains?: Maybe<String>;
  zipcode_starts_with?: Maybe<String>;
  zipcode_not_starts_with?: Maybe<String>;
  zipcode_ends_with?: Maybe<String>;
  zipcode_not_ends_with?: Maybe<String>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  neighborhood?: Maybe<String>;
  neighborhood_not?: Maybe<String>;
  neighborhood_in?: Maybe<String[] | String>;
  neighborhood_not_in?: Maybe<String[] | String>;
  neighborhood_lt?: Maybe<String>;
  neighborhood_lte?: Maybe<String>;
  neighborhood_gt?: Maybe<String>;
  neighborhood_gte?: Maybe<String>;
  neighborhood_contains?: Maybe<String>;
  neighborhood_not_contains?: Maybe<String>;
  neighborhood_starts_with?: Maybe<String>;
  neighborhood_not_starts_with?: Maybe<String>;
  neighborhood_ends_with?: Maybe<String>;
  neighborhood_not_ends_with?: Maybe<String>;
  number?: Maybe<String>;
  number_not?: Maybe<String>;
  number_in?: Maybe<String[] | String>;
  number_not_in?: Maybe<String[] | String>;
  number_lt?: Maybe<String>;
  number_lte?: Maybe<String>;
  number_gt?: Maybe<String>;
  number_gte?: Maybe<String>;
  number_contains?: Maybe<String>;
  number_not_contains?: Maybe<String>;
  number_starts_with?: Maybe<String>;
  number_not_starts_with?: Maybe<String>;
  number_ends_with?: Maybe<String>;
  number_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  complement?: Maybe<String>;
  complement_not?: Maybe<String>;
  complement_in?: Maybe<String[] | String>;
  complement_not_in?: Maybe<String[] | String>;
  complement_lt?: Maybe<String>;
  complement_lte?: Maybe<String>;
  complement_gt?: Maybe<String>;
  complement_gte?: Maybe<String>;
  complement_contains?: Maybe<String>;
  complement_not_contains?: Maybe<String>;
  complement_starts_with?: Maybe<String>;
  complement_not_starts_with?: Maybe<String>;
  complement_ends_with?: Maybe<String>;
  complement_not_ends_with?: Maybe<String>;
  AND?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  OR?: Maybe<AddressWhereInput[] | AddressWhereInput>;
  NOT?: Maybe<AddressWhereInput[] | AddressWhereInput>;
}

export type AssessmentWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface AssessmentWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  owner?: Maybe<UserWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  star?: Maybe<Stars>;
  star_not?: Maybe<Stars>;
  star_in?: Maybe<Stars[] | Stars>;
  star_not_in?: Maybe<Stars[] | Stars>;
  AND?: Maybe<AssessmentWhereInput[] | AssessmentWhereInput>;
  OR?: Maybe<AssessmentWhereInput[] | AssessmentWhereInput>;
  NOT?: Maybe<AssessmentWhereInput[] | AssessmentWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  document?: Maybe<String>;
  document_not?: Maybe<String>;
  document_in?: Maybe<String[] | String>;
  document_not_in?: Maybe<String[] | String>;
  document_lt?: Maybe<String>;
  document_lte?: Maybe<String>;
  document_gt?: Maybe<String>;
  document_gte?: Maybe<String>;
  document_contains?: Maybe<String>;
  document_not_contains?: Maybe<String>;
  document_starts_with?: Maybe<String>;
  document_not_starts_with?: Maybe<String>;
  document_ends_with?: Maybe<String>;
  document_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lastname?: Maybe<String>;
  lastname_not?: Maybe<String>;
  lastname_in?: Maybe<String[] | String>;
  lastname_not_in?: Maybe<String[] | String>;
  lastname_lt?: Maybe<String>;
  lastname_lte?: Maybe<String>;
  lastname_gt?: Maybe<String>;
  lastname_gte?: Maybe<String>;
  lastname_contains?: Maybe<String>;
  lastname_not_contains?: Maybe<String>;
  lastname_starts_with?: Maybe<String>;
  lastname_not_starts_with?: Maybe<String>;
  lastname_ends_with?: Maybe<String>;
  lastname_not_ends_with?: Maybe<String>;
  address_every?: Maybe<AddressWhereInput>;
  address_some?: Maybe<AddressWhereInput>;
  address_none?: Maybe<AddressWhereInput>;
  assessments_every?: Maybe<AssessmentWhereInput>;
  assessments_some?: Maybe<AssessmentWhereInput>;
  assessments_none?: Maybe<AssessmentWhereInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export type ProviderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
}>;

export interface ProviderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  assessments_every?: Maybe<AssessmentWhereInput>;
  assessments_some?: Maybe<AssessmentWhereInput>;
  assessments_none?: Maybe<AssessmentWhereInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  address_every?: Maybe<AddressWhereInput>;
  address_some?: Maybe<AddressWhereInput>;
  address_none?: Maybe<AddressWhereInput>;
  AND?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  OR?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
  NOT?: Maybe<ProviderWhereInput[] | ProviderWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface AddressCreateInput {
  id?: Maybe<ID_Input>;
  zipcode: String;
  street: String;
  neighborhood: String;
  number: String;
  city: String;
  country: String;
  state: String;
  complement?: Maybe<String>;
}

export interface AddressUpdateInput {
  zipcode?: Maybe<String>;
  street?: Maybe<String>;
  neighborhood?: Maybe<String>;
  number?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  state?: Maybe<String>;
  complement?: Maybe<String>;
}

export interface AddressUpdateManyMutationInput {
  zipcode?: Maybe<String>;
  street?: Maybe<String>;
  neighborhood?: Maybe<String>;
  number?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  state?: Maybe<String>;
  complement?: Maybe<String>;
}

export interface AssessmentCreateInput {
  id?: Maybe<ID_Input>;
  owner: UserCreateOneWithoutAssessmentsInput;
  description: String;
  title: String;
  star?: Maybe<Stars>;
}

export interface UserCreateOneWithoutAssessmentsInput {
  create?: Maybe<UserCreateWithoutAssessmentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutAssessmentsInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone: String;
  document: String;
  password: String;
  name: String;
  lastname: String;
  address?: Maybe<AddressCreateManyInput>;
}

export interface AddressCreateManyInput {
  create?: Maybe<AddressCreateInput[] | AddressCreateInput>;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
}

export interface AssessmentUpdateInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutAssessmentsInput>;
  description?: Maybe<String>;
  title?: Maybe<String>;
  star?: Maybe<Stars>;
}

export interface UserUpdateOneRequiredWithoutAssessmentsInput {
  create?: Maybe<UserCreateWithoutAssessmentsInput>;
  update?: Maybe<UserUpdateWithoutAssessmentsDataInput>;
  upsert?: Maybe<UserUpsertWithoutAssessmentsInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutAssessmentsDataInput {
  email?: Maybe<String>;
  phone?: Maybe<String>;
  document?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  lastname?: Maybe<String>;
  address?: Maybe<AddressUpdateManyInput>;
}

export interface AddressUpdateManyInput {
  create?: Maybe<AddressCreateInput[] | AddressCreateInput>;
  update?: Maybe<
    | AddressUpdateWithWhereUniqueNestedInput[]
    | AddressUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AddressUpsertWithWhereUniqueNestedInput[]
    | AddressUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  connect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  set?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  disconnect?: Maybe<AddressWhereUniqueInput[] | AddressWhereUniqueInput>;
  deleteMany?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  updateMany?: Maybe<
    | AddressUpdateManyWithWhereNestedInput[]
    | AddressUpdateManyWithWhereNestedInput
  >;
}

export interface AddressUpdateWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput;
  data: AddressUpdateDataInput;
}

export interface AddressUpdateDataInput {
  zipcode?: Maybe<String>;
  street?: Maybe<String>;
  neighborhood?: Maybe<String>;
  number?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  state?: Maybe<String>;
  complement?: Maybe<String>;
}

export interface AddressUpsertWithWhereUniqueNestedInput {
  where: AddressWhereUniqueInput;
  update: AddressUpdateDataInput;
  create: AddressCreateInput;
}

export interface AddressScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  zipcode?: Maybe<String>;
  zipcode_not?: Maybe<String>;
  zipcode_in?: Maybe<String[] | String>;
  zipcode_not_in?: Maybe<String[] | String>;
  zipcode_lt?: Maybe<String>;
  zipcode_lte?: Maybe<String>;
  zipcode_gt?: Maybe<String>;
  zipcode_gte?: Maybe<String>;
  zipcode_contains?: Maybe<String>;
  zipcode_not_contains?: Maybe<String>;
  zipcode_starts_with?: Maybe<String>;
  zipcode_not_starts_with?: Maybe<String>;
  zipcode_ends_with?: Maybe<String>;
  zipcode_not_ends_with?: Maybe<String>;
  street?: Maybe<String>;
  street_not?: Maybe<String>;
  street_in?: Maybe<String[] | String>;
  street_not_in?: Maybe<String[] | String>;
  street_lt?: Maybe<String>;
  street_lte?: Maybe<String>;
  street_gt?: Maybe<String>;
  street_gte?: Maybe<String>;
  street_contains?: Maybe<String>;
  street_not_contains?: Maybe<String>;
  street_starts_with?: Maybe<String>;
  street_not_starts_with?: Maybe<String>;
  street_ends_with?: Maybe<String>;
  street_not_ends_with?: Maybe<String>;
  neighborhood?: Maybe<String>;
  neighborhood_not?: Maybe<String>;
  neighborhood_in?: Maybe<String[] | String>;
  neighborhood_not_in?: Maybe<String[] | String>;
  neighborhood_lt?: Maybe<String>;
  neighborhood_lte?: Maybe<String>;
  neighborhood_gt?: Maybe<String>;
  neighborhood_gte?: Maybe<String>;
  neighborhood_contains?: Maybe<String>;
  neighborhood_not_contains?: Maybe<String>;
  neighborhood_starts_with?: Maybe<String>;
  neighborhood_not_starts_with?: Maybe<String>;
  neighborhood_ends_with?: Maybe<String>;
  neighborhood_not_ends_with?: Maybe<String>;
  number?: Maybe<String>;
  number_not?: Maybe<String>;
  number_in?: Maybe<String[] | String>;
  number_not_in?: Maybe<String[] | String>;
  number_lt?: Maybe<String>;
  number_lte?: Maybe<String>;
  number_gt?: Maybe<String>;
  number_gte?: Maybe<String>;
  number_contains?: Maybe<String>;
  number_not_contains?: Maybe<String>;
  number_starts_with?: Maybe<String>;
  number_not_starts_with?: Maybe<String>;
  number_ends_with?: Maybe<String>;
  number_not_ends_with?: Maybe<String>;
  city?: Maybe<String>;
  city_not?: Maybe<String>;
  city_in?: Maybe<String[] | String>;
  city_not_in?: Maybe<String[] | String>;
  city_lt?: Maybe<String>;
  city_lte?: Maybe<String>;
  city_gt?: Maybe<String>;
  city_gte?: Maybe<String>;
  city_contains?: Maybe<String>;
  city_not_contains?: Maybe<String>;
  city_starts_with?: Maybe<String>;
  city_not_starts_with?: Maybe<String>;
  city_ends_with?: Maybe<String>;
  city_not_ends_with?: Maybe<String>;
  country?: Maybe<String>;
  country_not?: Maybe<String>;
  country_in?: Maybe<String[] | String>;
  country_not_in?: Maybe<String[] | String>;
  country_lt?: Maybe<String>;
  country_lte?: Maybe<String>;
  country_gt?: Maybe<String>;
  country_gte?: Maybe<String>;
  country_contains?: Maybe<String>;
  country_not_contains?: Maybe<String>;
  country_starts_with?: Maybe<String>;
  country_not_starts_with?: Maybe<String>;
  country_ends_with?: Maybe<String>;
  country_not_ends_with?: Maybe<String>;
  state?: Maybe<String>;
  state_not?: Maybe<String>;
  state_in?: Maybe<String[] | String>;
  state_not_in?: Maybe<String[] | String>;
  state_lt?: Maybe<String>;
  state_lte?: Maybe<String>;
  state_gt?: Maybe<String>;
  state_gte?: Maybe<String>;
  state_contains?: Maybe<String>;
  state_not_contains?: Maybe<String>;
  state_starts_with?: Maybe<String>;
  state_not_starts_with?: Maybe<String>;
  state_ends_with?: Maybe<String>;
  state_not_ends_with?: Maybe<String>;
  complement?: Maybe<String>;
  complement_not?: Maybe<String>;
  complement_in?: Maybe<String[] | String>;
  complement_not_in?: Maybe<String[] | String>;
  complement_lt?: Maybe<String>;
  complement_lte?: Maybe<String>;
  complement_gt?: Maybe<String>;
  complement_gte?: Maybe<String>;
  complement_contains?: Maybe<String>;
  complement_not_contains?: Maybe<String>;
  complement_starts_with?: Maybe<String>;
  complement_not_starts_with?: Maybe<String>;
  complement_ends_with?: Maybe<String>;
  complement_not_ends_with?: Maybe<String>;
  AND?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  OR?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
  NOT?: Maybe<AddressScalarWhereInput[] | AddressScalarWhereInput>;
}

export interface AddressUpdateManyWithWhereNestedInput {
  where: AddressScalarWhereInput;
  data: AddressUpdateManyDataInput;
}

export interface AddressUpdateManyDataInput {
  zipcode?: Maybe<String>;
  street?: Maybe<String>;
  neighborhood?: Maybe<String>;
  number?: Maybe<String>;
  city?: Maybe<String>;
  country?: Maybe<String>;
  state?: Maybe<String>;
  complement?: Maybe<String>;
}

export interface UserUpsertWithoutAssessmentsInput {
  update: UserUpdateWithoutAssessmentsDataInput;
  create: UserCreateWithoutAssessmentsInput;
}

export interface AssessmentUpdateManyMutationInput {
  description?: Maybe<String>;
  title?: Maybe<String>;
  star?: Maybe<Stars>;
}

export interface ProviderCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone: String;
  name: String;
  type?: Maybe<String>;
  assessments?: Maybe<AssessmentCreateManyInput>;
  description?: Maybe<String>;
  address?: Maybe<AddressCreateManyInput>;
}

export interface AssessmentCreateManyInput {
  create?: Maybe<AssessmentCreateInput[] | AssessmentCreateInput>;
  connect?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
}

export interface ProviderUpdateInput {
  email?: Maybe<String>;
  phone?: Maybe<String>;
  name?: Maybe<String>;
  type?: Maybe<String>;
  assessments?: Maybe<AssessmentUpdateManyInput>;
  description?: Maybe<String>;
  address?: Maybe<AddressUpdateManyInput>;
}

export interface AssessmentUpdateManyInput {
  create?: Maybe<AssessmentCreateInput[] | AssessmentCreateInput>;
  update?: Maybe<
    | AssessmentUpdateWithWhereUniqueNestedInput[]
    | AssessmentUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | AssessmentUpsertWithWhereUniqueNestedInput[]
    | AssessmentUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  connect?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  set?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  disconnect?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  deleteMany?: Maybe<AssessmentScalarWhereInput[] | AssessmentScalarWhereInput>;
  updateMany?: Maybe<
    | AssessmentUpdateManyWithWhereNestedInput[]
    | AssessmentUpdateManyWithWhereNestedInput
  >;
}

export interface AssessmentUpdateWithWhereUniqueNestedInput {
  where: AssessmentWhereUniqueInput;
  data: AssessmentUpdateDataInput;
}

export interface AssessmentUpdateDataInput {
  owner?: Maybe<UserUpdateOneRequiredWithoutAssessmentsInput>;
  description?: Maybe<String>;
  title?: Maybe<String>;
  star?: Maybe<Stars>;
}

export interface AssessmentUpsertWithWhereUniqueNestedInput {
  where: AssessmentWhereUniqueInput;
  update: AssessmentUpdateDataInput;
  create: AssessmentCreateInput;
}

export interface AssessmentScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  star?: Maybe<Stars>;
  star_not?: Maybe<Stars>;
  star_in?: Maybe<Stars[] | Stars>;
  star_not_in?: Maybe<Stars[] | Stars>;
  AND?: Maybe<AssessmentScalarWhereInput[] | AssessmentScalarWhereInput>;
  OR?: Maybe<AssessmentScalarWhereInput[] | AssessmentScalarWhereInput>;
  NOT?: Maybe<AssessmentScalarWhereInput[] | AssessmentScalarWhereInput>;
}

export interface AssessmentUpdateManyWithWhereNestedInput {
  where: AssessmentScalarWhereInput;
  data: AssessmentUpdateManyDataInput;
}

export interface AssessmentUpdateManyDataInput {
  description?: Maybe<String>;
  title?: Maybe<String>;
  star?: Maybe<Stars>;
}

export interface ProviderUpdateManyMutationInput {
  email?: Maybe<String>;
  phone?: Maybe<String>;
  name?: Maybe<String>;
  type?: Maybe<String>;
  description?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  phone: String;
  document: String;
  password: String;
  name: String;
  lastname: String;
  address?: Maybe<AddressCreateManyInput>;
  assessments?: Maybe<AssessmentCreateManyWithoutOwnerInput>;
}

export interface AssessmentCreateManyWithoutOwnerInput {
  create?: Maybe<
    AssessmentCreateWithoutOwnerInput[] | AssessmentCreateWithoutOwnerInput
  >;
  connect?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
}

export interface AssessmentCreateWithoutOwnerInput {
  id?: Maybe<ID_Input>;
  description: String;
  title: String;
  star?: Maybe<Stars>;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  phone?: Maybe<String>;
  document?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  lastname?: Maybe<String>;
  address?: Maybe<AddressUpdateManyInput>;
  assessments?: Maybe<AssessmentUpdateManyWithoutOwnerInput>;
}

export interface AssessmentUpdateManyWithoutOwnerInput {
  create?: Maybe<
    AssessmentCreateWithoutOwnerInput[] | AssessmentCreateWithoutOwnerInput
  >;
  delete?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  connect?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  set?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  disconnect?: Maybe<AssessmentWhereUniqueInput[] | AssessmentWhereUniqueInput>;
  update?: Maybe<
    | AssessmentUpdateWithWhereUniqueWithoutOwnerInput[]
    | AssessmentUpdateWithWhereUniqueWithoutOwnerInput
  >;
  upsert?: Maybe<
    | AssessmentUpsertWithWhereUniqueWithoutOwnerInput[]
    | AssessmentUpsertWithWhereUniqueWithoutOwnerInput
  >;
  deleteMany?: Maybe<AssessmentScalarWhereInput[] | AssessmentScalarWhereInput>;
  updateMany?: Maybe<
    | AssessmentUpdateManyWithWhereNestedInput[]
    | AssessmentUpdateManyWithWhereNestedInput
  >;
}

export interface AssessmentUpdateWithWhereUniqueWithoutOwnerInput {
  where: AssessmentWhereUniqueInput;
  data: AssessmentUpdateWithoutOwnerDataInput;
}

export interface AssessmentUpdateWithoutOwnerDataInput {
  description?: Maybe<String>;
  title?: Maybe<String>;
  star?: Maybe<Stars>;
}

export interface AssessmentUpsertWithWhereUniqueWithoutOwnerInput {
  where: AssessmentWhereUniqueInput;
  update: AssessmentUpdateWithoutOwnerDataInput;
  create: AssessmentCreateWithoutOwnerInput;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  phone?: Maybe<String>;
  document?: Maybe<String>;
  password?: Maybe<String>;
  name?: Maybe<String>;
  lastname?: Maybe<String>;
}

export interface AddressSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AddressWhereInput>;
  AND?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  OR?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
  NOT?: Maybe<AddressSubscriptionWhereInput[] | AddressSubscriptionWhereInput>;
}

export interface AssessmentSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<AssessmentWhereInput>;
  AND?: Maybe<
    AssessmentSubscriptionWhereInput[] | AssessmentSubscriptionWhereInput
  >;
  OR?: Maybe<
    AssessmentSubscriptionWhereInput[] | AssessmentSubscriptionWhereInput
  >;
  NOT?: Maybe<
    AssessmentSubscriptionWhereInput[] | AssessmentSubscriptionWhereInput
  >;
}

export interface ProviderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProviderWhereInput>;
  AND?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
  OR?: Maybe<ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput>;
  NOT?: Maybe<
    ProviderSubscriptionWhereInput[] | ProviderSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Address {
  id: ID_Output;
  zipcode: String;
  street: String;
  neighborhood: String;
  number: String;
  city: String;
  country: String;
  state: String;
  complement?: String;
}

export interface AddressPromise extends Promise<Address>, Fragmentable {
  id: () => Promise<ID_Output>;
  zipcode: () => Promise<String>;
  street: () => Promise<String>;
  neighborhood: () => Promise<String>;
  number: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  state: () => Promise<String>;
  complement: () => Promise<String>;
}

export interface AddressSubscription
  extends Promise<AsyncIterator<Address>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  zipcode: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  neighborhood: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
}

export interface AddressNullablePromise
  extends Promise<Address | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  zipcode: () => Promise<String>;
  street: () => Promise<String>;
  neighborhood: () => Promise<String>;
  number: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  state: () => Promise<String>;
  complement: () => Promise<String>;
}

export interface AddressConnection {
  pageInfo: PageInfo;
  edges: AddressEdge[];
}

export interface AddressConnectionPromise
  extends Promise<AddressConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AddressEdge>>() => T;
  aggregate: <T = AggregateAddressPromise>() => T;
}

export interface AddressConnectionSubscription
  extends Promise<AsyncIterator<AddressConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AddressEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAddressSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AddressEdge {
  node: Address;
  cursor: String;
}

export interface AddressEdgePromise extends Promise<AddressEdge>, Fragmentable {
  node: <T = AddressPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AddressEdgeSubscription
  extends Promise<AsyncIterator<AddressEdge>>,
    Fragmentable {
  node: <T = AddressSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAddress {
  count: Int;
}

export interface AggregateAddressPromise
  extends Promise<AggregateAddress>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAddressSubscription
  extends Promise<AsyncIterator<AggregateAddress>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Assessment {
  id: ID_Output;
  description: String;
  title: String;
  star?: Stars;
}

export interface AssessmentPromise extends Promise<Assessment>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  description: () => Promise<String>;
  title: () => Promise<String>;
  star: () => Promise<Stars>;
}

export interface AssessmentSubscription
  extends Promise<AsyncIterator<Assessment>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  description: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  star: () => Promise<AsyncIterator<Stars>>;
}

export interface AssessmentNullablePromise
  extends Promise<Assessment | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  description: () => Promise<String>;
  title: () => Promise<String>;
  star: () => Promise<Stars>;
}

export interface User {
  id: ID_Output;
  email: String;
  phone: String;
  document: String;
  password: String;
  name: String;
  lastname: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  document: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  lastname: () => Promise<String>;
  address: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  assessments: <T = FragmentableArray<Assessment>>(args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  document: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
  address: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  assessments: <T = Promise<AsyncIterator<AssessmentSubscription>>>(args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  document: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  lastname: () => Promise<String>;
  address: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  assessments: <T = FragmentableArray<Assessment>>(args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface AssessmentConnection {
  pageInfo: PageInfo;
  edges: AssessmentEdge[];
}

export interface AssessmentConnectionPromise
  extends Promise<AssessmentConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<AssessmentEdge>>() => T;
  aggregate: <T = AggregateAssessmentPromise>() => T;
}

export interface AssessmentConnectionSubscription
  extends Promise<AsyncIterator<AssessmentConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<AssessmentEdgeSubscription>>>() => T;
  aggregate: <T = AggregateAssessmentSubscription>() => T;
}

export interface AssessmentEdge {
  node: Assessment;
  cursor: String;
}

export interface AssessmentEdgePromise
  extends Promise<AssessmentEdge>,
    Fragmentable {
  node: <T = AssessmentPromise>() => T;
  cursor: () => Promise<String>;
}

export interface AssessmentEdgeSubscription
  extends Promise<AsyncIterator<AssessmentEdge>>,
    Fragmentable {
  node: <T = AssessmentSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateAssessment {
  count: Int;
}

export interface AggregateAssessmentPromise
  extends Promise<AggregateAssessment>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateAssessmentSubscription
  extends Promise<AsyncIterator<AggregateAssessment>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Provider {
  id: ID_Output;
  email: String;
  phone: String;
  name: String;
  type?: String;
  description?: String;
}

export interface ProviderPromise extends Promise<Provider>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  assessments: <T = FragmentableArray<Assessment>>(args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  address: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProviderSubscription
  extends Promise<AsyncIterator<Provider>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  assessments: <T = Promise<AsyncIterator<AssessmentSubscription>>>(args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<AsyncIterator<String>>;
  address: <T = Promise<AsyncIterator<AddressSubscription>>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProviderNullablePromise
  extends Promise<Provider | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  assessments: <T = FragmentableArray<Assessment>>(args?: {
    where?: AssessmentWhereInput;
    orderBy?: AssessmentOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  description: () => Promise<String>;
  address: <T = FragmentableArray<Address>>(args?: {
    where?: AddressWhereInput;
    orderBy?: AddressOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProviderConnection {
  pageInfo: PageInfo;
  edges: ProviderEdge[];
}

export interface ProviderConnectionPromise
  extends Promise<ProviderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProviderEdge>>() => T;
  aggregate: <T = AggregateProviderPromise>() => T;
}

export interface ProviderConnectionSubscription
  extends Promise<AsyncIterator<ProviderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProviderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProviderSubscription>() => T;
}

export interface ProviderEdge {
  node: Provider;
  cursor: String;
}

export interface ProviderEdgePromise
  extends Promise<ProviderEdge>,
    Fragmentable {
  node: <T = ProviderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProviderEdgeSubscription
  extends Promise<AsyncIterator<ProviderEdge>>,
    Fragmentable {
  node: <T = ProviderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProvider {
  count: Int;
}

export interface AggregateProviderPromise
  extends Promise<AggregateProvider>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProviderSubscription
  extends Promise<AsyncIterator<AggregateProvider>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AddressSubscriptionPayload {
  mutation: MutationType;
  node: Address;
  updatedFields: String[];
  previousValues: AddressPreviousValues;
}

export interface AddressSubscriptionPayloadPromise
  extends Promise<AddressSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AddressPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AddressPreviousValuesPromise>() => T;
}

export interface AddressSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AddressSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AddressSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AddressPreviousValuesSubscription>() => T;
}

export interface AddressPreviousValues {
  id: ID_Output;
  zipcode: String;
  street: String;
  neighborhood: String;
  number: String;
  city: String;
  country: String;
  state: String;
  complement?: String;
}

export interface AddressPreviousValuesPromise
  extends Promise<AddressPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  zipcode: () => Promise<String>;
  street: () => Promise<String>;
  neighborhood: () => Promise<String>;
  number: () => Promise<String>;
  city: () => Promise<String>;
  country: () => Promise<String>;
  state: () => Promise<String>;
  complement: () => Promise<String>;
}

export interface AddressPreviousValuesSubscription
  extends Promise<AsyncIterator<AddressPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  zipcode: () => Promise<AsyncIterator<String>>;
  street: () => Promise<AsyncIterator<String>>;
  neighborhood: () => Promise<AsyncIterator<String>>;
  number: () => Promise<AsyncIterator<String>>;
  city: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  state: () => Promise<AsyncIterator<String>>;
  complement: () => Promise<AsyncIterator<String>>;
}

export interface AssessmentSubscriptionPayload {
  mutation: MutationType;
  node: Assessment;
  updatedFields: String[];
  previousValues: AssessmentPreviousValues;
}

export interface AssessmentSubscriptionPayloadPromise
  extends Promise<AssessmentSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = AssessmentPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = AssessmentPreviousValuesPromise>() => T;
}

export interface AssessmentSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<AssessmentSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = AssessmentSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = AssessmentPreviousValuesSubscription>() => T;
}

export interface AssessmentPreviousValues {
  id: ID_Output;
  description: String;
  title: String;
  star?: Stars;
}

export interface AssessmentPreviousValuesPromise
  extends Promise<AssessmentPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  description: () => Promise<String>;
  title: () => Promise<String>;
  star: () => Promise<Stars>;
}

export interface AssessmentPreviousValuesSubscription
  extends Promise<AsyncIterator<AssessmentPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  description: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  star: () => Promise<AsyncIterator<Stars>>;
}

export interface ProviderSubscriptionPayload {
  mutation: MutationType;
  node: Provider;
  updatedFields: String[];
  previousValues: ProviderPreviousValues;
}

export interface ProviderSubscriptionPayloadPromise
  extends Promise<ProviderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProviderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProviderPreviousValuesPromise>() => T;
}

export interface ProviderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProviderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProviderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProviderPreviousValuesSubscription>() => T;
}

export interface ProviderPreviousValues {
  id: ID_Output;
  email: String;
  phone: String;
  name: String;
  type?: String;
  description?: String;
}

export interface ProviderPreviousValuesPromise
  extends Promise<ProviderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  name: () => Promise<String>;
  type: () => Promise<String>;
  description: () => Promise<String>;
}

export interface ProviderPreviousValuesSubscription
  extends Promise<AsyncIterator<ProviderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  phone: String;
  document: String;
  password: String;
  name: String;
  lastname: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  phone: () => Promise<String>;
  document: () => Promise<String>;
  password: () => Promise<String>;
  name: () => Promise<String>;
  lastname: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  document: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  lastname: () => Promise<AsyncIterator<String>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Stars",
    embedded: false
  },
  {
    name: "Provider",
    embedded: false
  },
  {
    name: "Assessment",
    embedded: false
  },
  {
    name: "Address",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
